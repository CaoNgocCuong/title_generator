// Libraries
import { type ChangeEvent, useState } from "react";

// Components
import Head from "next/head";

// Assets
import AIImage from "../../public/ai.jpg";

// Utils
import { api } from "~/utils/api";

export default function Home() {
  // tRPC
  const { mutate, isLoading, data, isError, error } =
    api.youtube.youtube.useMutation();

  const [info, setInfo] = useState({
    alias: "",
    title: "",
  });

  const handleChangeInfo = (
    e: ChangeEvent<HTMLInputElement>,
    type: "alias" | "title"
  ) => {
    const { value = "" } = e?.target;

    setInfo((prev) => ({ ...prev, [type]: value }));
  };

  return (
    <div
      style={{ backgroundImage: `url(${AIImage.src})` }}
      className="relative h-screen w-screen bg-cover bg-center bg-no-repeat"
    >
      <Head>
        <title>Generator Title</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute left-2/4 top-2/4 flex h-80 w-96 -translate-x-2/4 -translate-y-2/4 flex-col rounded-md bg-cyan-900 p-3">
        <h2 className="mb-2 text-center text-lg font-semibold uppercase text-cyan-100">
          Generator Title
        </h2>
        <div className="mb-4 w-full">
          <label
            htmlFor="alias"
            className="block text-sm font-medium text-gray-200"
          >
            Alias
          </label>
          <div className="mt-1 flex rounded-md shadow-sm">
            <span className="inline-flex items-center rounded-l-md border border-r-0 border-gray-700 bg-gray-800 px-3 text-gray-300 sm:text-sm">
              @
            </span>
            <input
              id="alias"
              value={info.alias}
              onChange={(e) => handleChangeInfo(e, "alias")}
              type="text"
              placeholder="alias"
              className="block w-full min-w-0 flex-1 rounded-none rounded-r-md border-gray-700 bg-gray-800 px-3 py-2 text-white focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>
        </div>

        <div className="w-full">
          <label
            htmlFor="topic"
            className="block text-sm font-medium text-gray-200"
          >
            Topic
          </label>
          <div className="mt-1">
            <input
              id="topic"
              value={info.title}
              onChange={(e) => handleChangeInfo(e, "title")}
              type="text"
              placeholder="Topic..."
              className="block w-full min-w-0 flex-1 rounded-md border-gray-700 bg-gray-800 px-3 py-2 text-white focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>
        </div>

        <div className="mt-8 flex items-center justify-center">
          <button
            type="button"
            disabled={!info.alias || !info.title}
            onClick={() => {
              mutate({ title: info.title, alias: "@" + info.alias });
            }}
            className="mt-6 flex h-10 w-full items-center justify-center rounded-full border-2 border-transparent bg-indigo-700 px-6 py-4 text-sm font-medium text-white transition hover:border-2 hover:border-indigo-700 hover:bg-indigo-900 disabled:cursor-not-allowed disabled:bg-white disabled:text-gray-600 disabled:hover:border-gray-200 md:mt-0 md:w-fit"
          >
            {isLoading ? "Generating..." : "Generate title"}
          </button>
        </div>

        {data ? (
          <div className="flex w-full flex-col items-center gap-1 text-center text-white">
            <span className="text-lg font-medium">Your result:</span>
            <span className="text-base">{data.data}</span>
          </div>
        ) : null}
      </div>
      <div className="custom-gradient absolute inset-0 -z-10 opacity-50" />
    </div>
  );
}
